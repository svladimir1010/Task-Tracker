from flask import Blueprint, render_template, redirect, url_for, request, flash, Response
from flask_login import login_user, logout_user, current_user, login_required
from app import db, bcrypt  # –∏–º–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ bcrypt –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
from app.models import Task, User  # –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–¥–∞—á–∏
from app.forms import RegisterForm, LoginForm, TaskForm  # —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ª–æ–≥–∏–Ω–∞ –∏ –∑–∞–¥–∞—á
from app.email.sender import send_confirmation_email
from flask_mail import Mail, Message
from app.email.tokens import confirm_token
from io import StringIO
from datetime import datetime, timezone # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ datetime –∏ timezone –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã
from dateutil import tz
from datetime import datetime
import csv

# –°–æ–∑–¥–∞–Ω–∏–µ Blueprint –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ —É–¥–æ–±—Å—Ç–≤–∞
bp = Blueprint('main', __name__)
mail = Mail()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_local_timezone():
    # timezone —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –º–æ–¥–µ–ª–∏ User
    user_timezone_str = current_user.timezone if current_user.is_authenticated else 'UTC'

    local_tz = tz.gettz(user_timezone_str)
    if not local_tz:
        # –ï—Å–ª–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º UTC –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        local_tz = tz.gettz('UTC')
    return local_tz


# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
@bp.route('/')
@bp.route('/index')  # –î–æ–±–∞–≤–∏–ª, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏ —Ç–∞–∫
@login_required
def index():
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    status_filter = request.args.get('status')
    category_filter = request.args.get('category')
    priority_filter = request.args.get('priority')  # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    sort_by = request.args.get('sort_by', 'id')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ ID
    sort_order = request.args.get('sort_order', 'asc')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–∏–π –ø–æ—Ä—è–¥–æ–∫
    search_filter = request.args.get('search')
    page = request.args.get('page', 1, type=int)  # –î–æ–±–∞–≤–∏–ª –ø–∞–≥–∏–Ω–∞—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ —É –≤–∞—Å –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç - –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å.

    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–¥–∞—á —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    query = Task.query.filter_by(user_id=current_user.id)

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫—É, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ
    if search_filter:
        query = query.filter(
            (Task.title.ilike(f'%{search_filter}%')) |
            (Task.description.ilike(f'%{search_filter}%'))
        )

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    if status_filter:
        query = query.filter_by(status=status_filter)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞
    if category_filter:
        query = query.filter_by(category=category_filter)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    if priority_filter:
        query = query.filter_by(priority=priority_filter)

    # –õ–æ–≥–∏–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏—è
    if sort_by == 'priority':
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º CASE –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
        query = query.order_by(
            db.case(
                (Task.priority == 'High', 1),
                (Task.priority == 'Medium', 2),
                (Task.priority == 'Low', 3),
                else_=4  # –î–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å
            )
        )
    elif sort_by == 'due_date':
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å —É—á—ë—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        order = Task.due_date.asc() if sort_order == 'asc' else Task.due_date.desc()
        query = query.order_by(order, Task.id)  # –î–æ–±–∞–≤–ª—è–µ–º ID –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    elif sort_by == 'created_at':
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
        order = Task.created_at.asc() if sort_order == 'asc' else Task.created_at.desc()
        query = query.order_by(order)
    else:  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ 'id'
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ ID
        order = Task.id.asc() if sort_order == 'asc' else Task.id.desc()
        query = query.order_by(order)

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    tasks = query.paginate(page=page, per_page=5,
                           error_out=False)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º paginate, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ, —Ç–æ .all()

    # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    local_tz_for_display = get_user_local_timezone()

    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –¥–∞—Ç–∞–º–∏ –∏–∑ –ë–î
    now_utc = datetime.now(timezone.utc)  # –≠—Ç–æ —Ç–æ—Ç now_utc, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω—É–∂–µ–Ω

    # –ü–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
    return render_template('index.html',
                           title='Home',  # –î–æ–±–∞–≤–∏–ª, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤ —à–∞–±–ª–æ–Ω–µ
                           tasks=tasks,  # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ
                           status_filter=status_filter,
                           category_filter=category_filter,
                           sort_by=sort_by,
                           priority_filter=priority_filter,
                           sort_order=sort_order,
                           local_tz=local_tz_for_display,  # <--- –ü–ï–†–ï–î–ê–ï–ú –û–ë–™–ï–ö–¢ –ß–ê–°–û–í–û–ì–û –ü–û–Ø–°–ê
                           now_utc=now_utc)  # <--- –ü–ï–†–ï–î–ê–ï–ú –¢–ï–ö–£–©–ï–ï UTC –í–†–ï–ú–Ø


# –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bp.route('/register', methods=['GET', 'POST'])
def register():
    form = RegisterForm()  # —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç —Ñ–æ—Ä–º—ã
    if form.validate_on_submit():  # –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ –≤–∞–ª–∏–¥–Ω–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ email —É–Ω–∏–∫–∞–ª—å–Ω—ã
        if User.query.filter_by(username=form.username.data).first():
            form.username.errors.append('Username already taken')
            return render_template('register.html', form=form)
        if User.query.filter_by(email=form.email.data).first():
            form.email.errors.append('Email already registered')
            return render_template('register.html', form=form)


        # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        hashed_password = bcrypt.generate_password_hash(form.password.data).decode('utf-8')

        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑ —Å–∫—Ä—ã—Ç–æ–≥–æ –ø–æ–ª—è —Ñ–æ—Ä–º—ã
        user_timezone_str = request.form.get('user_timezone', 'UTC')
        print(f"[REGISTER] Timezone from form: {user_timezone_str}")

        user = User(
            username=form.username.data,
            email=form.email.data,
            password_hash=hashed_password,
            confirmed=False,
            timezone = user_timezone_str
        )

        db.session.add(user)
        db.session.commit()
        print(f"[DEBUG] AFTER COMMIT, is_authenticated: {current_user.is_authenticated}")

        flash('Registration successful! Please log in.', 'success')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
        # send_confirmation_email(user)
        # flash('Registration successful! Check your email to confirm.', 'info')

        print(f"[DEBUG] current_user: {current_user.is_authenticated}")

        return redirect(url_for('main.login'))  # –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
    return render_template('register.html', form=form)  # –ï—Å–ª–∏ GET-–∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É


# üí° –í–∞–∂–Ω–æ: –≤ —ç—Ç–æ–π —É—á–µ–±–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–æ –Ω–∞ —ç—Ç–∞–ø–µ –ª–æ–≥–∏–Ω–∞.
# –≠—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏, –Ω–æ –Ω–∞ –ø—Ä–æ–¥–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.


# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bp.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('main.index'))

    form = LoginForm()
    if form.validate_on_submit():
        print("[LOGIN] Form submitted")
        user = User.query.filter_by(username=form.username.data).first()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è —Å bcrypt
        if user and bcrypt.check_password_hash(user.password_hash, form.password.data):

            if not user.confirmed:
                user.confirmed = True
                flash('Your account has been confirmed! You are now logged in.', 'success')

                db.session.commit()
            # ‚õî –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (—É—á–µ–±–Ω—ã–π —Ä–µ–∂–∏–º / dev-—Ä–µ–∂–∏–º)
            # if not user.confirmed:
            #     flash('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º.', 'warning')
            #     return redirect(url_for('main.login'))

            # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑ —Å–∫—Ä—ã—Ç–æ–≥–æ –ø–æ–ª—è —Ñ–æ—Ä–º—ã.
            # –ï—Å–ª–∏ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ JS –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ—Ç 'UTC'.
            user_timezone_str = request.form.get('user_timezone', 'UTC')

            print(f"[LOGIN] Timezone from form: {user_timezone_str}")
            print(f"[LOGIN] Previous timezone: {user.timezone}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            if user.timezone != user_timezone_str:
                user.timezone = user_timezone_str

                db.session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –≤ –ë–î

            login_user(user)  # –ª–æ–≥–∏–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            print(f"[LOGIN] Login user: {user.username}")
            print(f"[LOGIN] Authenticated: {current_user.is_authenticated}")

            return redirect(url_for('main.index'))

        flash('Invalid username or password', 'danger')  # —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    return render_template('login.html', form=form)


@bp.route('/confirm/<token>')
def confirm_email(token):
    # ‚õìÔ∏è –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º email
    email = confirm_token(token)

    # üõë –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω ‚Äî —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if not email:
        flash('–°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞.', 'danger')
        return redirect(url_for('main.login'))

    # üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —ç—Ç–∏–º email
    user = User.query.filter_by(email=email).first_or_404()

    # ‚úÖ –ï—Å–ª–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º
    if user.confirmed:
        flash('–ê–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.', 'info')
    else:
        # üìå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        user.confirmed = True
        db.session.commit()
        flash('Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –≤–æ–π—Ç–∏.', 'success')

    # üîÅ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    return redirect(url_for('main.login'))


# –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
@bp.route('/logout')
@login_required
def logout():
    logout_user()  # –¥–µ–∞–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    flash('You have been logged out.', 'success')
    return redirect(url_for('main.login'))  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –ª–æ–≥–∏–Ω


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
@bp.route('/add', methods=['GET', 'POST'])
@login_required
def add_task():
    form = TaskForm()
    if form.validate_on_submit():
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∫—Ä—ã—Ç–æ–≥–æ –ø–æ–ª—è —Ñ–æ—Ä–º—ã
        local_tz = get_user_local_timezone() # <--- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ due_date: –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ñ–æ—Ä–º—ã –≤ UTC –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        utc_due_datetime = None
        if form.due_date.data:
            local_due_datetime = form.due_date.data.replace(tzinfo=local_tz)
            utc_due_datetime = local_due_datetime.astimezone(tz.tzutc()).replace(tzinfo=None)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ reminder_date: –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ñ–æ—Ä–º—ã –≤ UTC –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        utc_reminder_datetime = None
        if form.reminder_date.data:
            local_reminder_datetime = form.reminder_date.data.replace(tzinfo=local_tz)
            utc_reminder_datetime = local_reminder_datetime.astimezone(tz.tzutc()).replace(tzinfo=None)

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤—è–∑–∫–∞ –∫ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        task = Task(
            title=form.title.data,
            description=form.description.data,
            priority=form.priority.data,
            due_date=utc_due_datetime,
            category=form.category.data or 'General',
            status=form.status.data,
            reminder_date=utc_reminder_datetime,
            user_id=current_user.id,
        )
        db.session.add(task)
        db.session.commit()
        flash('Task added successfully!', 'success')
        return redirect(url_for('main.index'))
    return render_template('add_task.html', form=form)


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏
@bp.route('/edit/<int:id>', methods=['GET', 'POST'])
@login_required
def edit_task(id):
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ 404
    task = Task.query.filter_by(id=id, user_id=current_user.id).first_or_404()
    form = TaskForm(obj=task)

    # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    local_tz = get_user_local_timezone()

    # –í —Å–ª—É—á–∞–µ GET-–∑–∞–ø—Ä–æ—Å–∞, obj=task —É–∂–µ –∑–∞–ø–æ–ª–Ω–∏–ª form.data, –Ω–æ –≤ UTC,
    # –ø–æ—ç—Ç–æ–º—É –º—ã –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if request.method == 'GET':
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º due_date –∏–∑ UTC (–∏–∑ –ë–î) –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–µ
        if task.due_date:
            utc_due_datetime = task.due_date.replace(tzinfo=tz.tzutc())  # –î–µ–ª–∞–µ–º naive UTC aware
            form.due_date.data = utc_due_datetime.astimezone(local_tz).replace(
                tzinfo=None)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏ –¥–µ–ª–∞–µ–º naive

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º reminder_date –∏–∑ UTC (–∏–∑ –ë–î) –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–µ
        if task.reminder_date:
            utc_reminder_datetime = task.reminder_date.replace(tzinfo=tz.tzutc())  # –î–µ–ª–∞–µ–º naive UTC aware
            form.reminder_date.data = utc_reminder_datetime.astimezone(local_tz).replace(
                tzinfo=None)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏ –¥–µ–ª–∞–µ–º naive

    if form.validate_on_submit():
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        task.title = form.title.data
        task.description = form.description.data
        task.category = form.category.data or 'General'
        task.status = form.status.data
        task.priority = form.priority.data

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ due_date: –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ñ–æ—Ä–º—ã (user input) –≤ UTC –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if form.due_date.data:
            local_due_datetime = form.due_date.data.replace(tzinfo=local_tz)
            task.due_date = local_due_datetime.astimezone(tz.tzutc()).replace(tzinfo=None)
        else:
            task.due_date = None  # –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ None

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ reminder_date: –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ñ–æ—Ä–º—ã (user input) –≤ UTC –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if form.reminder_date.data:
            local_reminder_datetime = form.reminder_date.data.replace(tzinfo=local_tz)
            task.reminder_date = local_reminder_datetime.astimezone(tz.tzutc()).replace(tzinfo=None)
        else:
            task.reminder_date = None  # –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ None

        db.session.commit()
        flash('Task updated successfully!', 'success')
        return redirect(url_for('main.index'))
    return render_template('edit_task.html', form=form, task=task)


# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
@bp.route('/delete/<int:id>', methods=['POST'])
@login_required
def delete_task(id):
    task = Task.query.filter_by(id=id, user_id=current_user.id).first_or_404()
    db.session.delete(task)
    db.session.commit()
    flash('Task deleted successfully!', 'success')
    return redirect(url_for('main.index'))


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º
@bp.route('/stats')
@login_required
def stats():
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tasks = Task.query.filter_by(user_id=current_user.id).all()
    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å—É
    stats = {
        'Not Started': len([t for t in tasks if t.status == 'Not Started']),
        'In Progress': len([t for t in tasks if t.status == 'In Progress']),
        'Completed': len([t for t in tasks if t.status == 'Completed'])
    }
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
    return render_template('stats.html', stats=stats)


@bp.route('/export')
@login_required
def export_tasks():
    tasks = Task.query.filter_by(user_id=current_user.id).all()
    output = StringIO()
    writer = csv.writer(output)
    writer.writerow(['ID', 'Title', 'Description', 'Status', 'Category', 'Created At'])
    for task in tasks:
        writer.writerow([
            task.id, task.title, task.description or '', task.status, task.category or 'General',
            task.created_at.strftime('%Y-%m-%d %H:%M')
        ])
    output.seek(0)
    return Response(output, mimetype='text/csv', headers={'Content-Disposition': 'attachment;filename=tasks.csv'})
