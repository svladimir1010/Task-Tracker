from flask import Blueprint, render_template, redirect, url_for, request, flash
from flask_login import login_user, logout_user, current_user, login_required
from app import db, bcrypt  # –∏–º–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ bcrypt –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
from app.models import Task, User  # –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–¥–∞—á–∏
from app.forms import RegisterForm, LoginForm, TaskForm  # —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ª–æ–≥–∏–Ω–∞ –∏ –∑–∞–¥–∞—á
from app.email.sender import send_confirmation_email
from app.email.tokens import confirm_token
from io import StringIO
from flask import Response
import csv

# –°–æ–∑–¥–∞–Ω–∏–µ Blueprint –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ —É–¥–æ–±—Å—Ç–≤–∞
bp = Blueprint('main', __name__)


# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
@bp.route('/')
@login_required  # –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def index():
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–∑ URL
    status_filter = request.args.get('status')
    category_filter = request.args.get('category')
    sort_by = request.args.get('sort_by', 'id')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ ID

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä–∫—É –∑–∞–¥–∞—á, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    query = Task.query.filter_by(user_id=current_user.id)
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
    if status_filter:
        query = query.filter_by(status=status_filter)
    if category_filter:
        query = query.filter_by(category=category_filter)

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –ø–æ ID
    if sort_by == 'created_at':
        tasks = query.order_by(Task.created_at.desc()).all()
    else:
        tasks = query.order_by(Task.id).all()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
    return render_template('index.html', tasks=tasks, status_filter=status_filter, category_filter=category_filter,
                           sort_by=sort_by)


# –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bp.route('/register', methods=['GET', 'POST'])
def register():
    form = RegisterForm()  # —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç —Ñ–æ—Ä–º—ã
    if form.validate_on_submit():  # –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ –≤–∞–ª–∏–¥–Ω–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ email —É–Ω–∏–∫–∞–ª—å–Ω—ã
        if User.query.filter_by(username=form.username.data).first():
            form.username.errors.append('Username already taken')
            return render_template('register.html', form=form)
        if User.query.filter_by(email=form.email.data).first():
            form.email.errors.append('Email already registered')
            return render_template('register.html', form=form)

        # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        hashed_password = bcrypt.generate_password_hash(form.password.data).decode('utf-8')
        user = User(
            username=form.username.data,
            email=form.email.data,
            password=hashed_password,
            confirmed=False  # <-- –Ω–æ–≤–æ–µ –ø–æ–ª–µ (—Å–º. –Ω–∏–∂–µ)
        )
        db.session.add(user)
        db.session.commit()
        flash('Registration successful! Please log in.', 'success')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
        # send_confirmation_email(user)
        # flash('Registration successful! Check your email to confirm.', 'info')

        return redirect(url_for('main.login'))  # –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
    return render_template('register.html', form=form)  # –ï—Å–ª–∏ GET-–∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É


@bp.route('/confirm/<token>')
def confirm_email(token):
    # ‚õìÔ∏è –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º email
    email = confirm_token(token)

    # üõë –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω ‚Äî —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if not email:
        flash('–°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞.', 'danger')
        return redirect(url_for('main.login'))

    # üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —ç—Ç–∏–º email
    user = User.query.filter_by(email=email).first_or_404()

    # ‚úÖ –ï—Å–ª–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º
    if user.confirmed:
        flash('–ê–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.', 'info')
    else:
        # üìå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        user.confirmed = True
        db.session.commit()
        flash('Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –≤–æ–π—Ç–∏.', 'success')

    # üîÅ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    return redirect(url_for('main.login'))


# üí° –í–∞–∂–Ω–æ: –≤ —ç—Ç–æ–π —É—á–µ–±–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–æ –Ω–∞ —ç—Ç–∞–ø–µ –ª–æ–≥–∏–Ω–∞.
# –≠—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏, –Ω–æ –Ω–∞ –ø—Ä–æ–¥–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.


# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bp.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
        if user and bcrypt.check_password_hash(user.password, form.password.data):
            # ‚õî –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (—É—á–µ–±–Ω—ã–π —Ä–µ–∂–∏–º / dev-—Ä–µ–∂–∏–º)
            # if not user.confirmed:
            #     flash('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º.', 'warning')
            #     return redirect(url_for('main.login'))

            login_user(user)  # –ª–æ–≥–∏–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return redirect(url_for('main.index'))

        flash('Invalid username or password', 'danger')  # —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    return render_template('login.html', form=form)


# –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
@bp.route('/logout')
@login_required
def logout():
    logout_user()  # –¥–µ–∞–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    flash('You have been logged out.', 'success')
    return redirect(url_for('main.login'))  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –ª–æ–≥–∏–Ω


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
@bp.route('/add', methods=['GET', 'POST'])
@login_required
def add_task():
    form = TaskForm()
    if form.validate_on_submit():
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤—è–∑–∫–∞ –∫ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        task = Task(
            title=form.title.data,
            description=form.description.data,
            category=form.category.data or 'General',
            status=form.status.data,
            user_id=current_user.id
        )
        db.session.add(task)
        db.session.commit()
        flash('Task added successfully!', 'success')
        return redirect(url_for('main.index'))
    return render_template('add_task.html', form=form)


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏
@bp.route('/edit/<int:id>', methods=['GET', 'POST'])
@login_required
def edit_task(id):
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ 404
    task = Task.query.filter_by(id=id, user_id=current_user.id).first_or_404()
    form = TaskForm()

    if form.validate_on_submit():
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        task.title = form.title.data
        task.description = form.description.data
        task.category = form.category.data or 'General'
        task.status = form.status.data
        db.session.commit()
        flash('Task updated successfully!', 'success')
        return redirect(url_for('main.index'))

    elif request.method == 'GET':
        # –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∏
        form.title.data = task.title
        form.description.data = task.description
        form.category.data = task.category
        form.status.data = task.status

    return render_template('edit_task.html', form=form, task=task)


# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
@bp.route('/delete/<int:id>', methods=['POST'])
@login_required
def delete_task(id):
    task = Task.query.filter_by(id=id, user_id=current_user.id).first_or_404()
    db.session.delete(task)
    db.session.commit()
    flash('Task deleted successfully!', 'success')
    return redirect(url_for('main.index'))


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º
@bp.route('/stats')
@login_required
def stats():
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tasks = Task.query.filter_by(user_id=current_user.id).all()
    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å—É
    stats = {
        'Not Started': len([t for t in tasks if t.status == 'Not Started']),
        'In Progress': len([t for t in tasks if t.status == 'In Progress']),
        'Completed': len([t for t in tasks if t.status == 'Completed'])
    }
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
    return render_template('stats.html', stats=stats)


@bp.route('/export')
@login_required
def export_tasks():
    tasks = Task.query.filter_by(user_id=current_user.id).all()
    output = StringIO()
    writer = csv.writer(output)
    writer.writerow(['ID', 'Title', 'Description', 'Status', 'Category', 'Created At'])
    for task in tasks:
        writer.writerow([
            task.id, task.title, task.description or '', task.status, task.category or 'General',
            task.created_at.strftime('%Y-%m-%d %H:%M')
        ])
    output.seek(0)
    return Response(output, mimetype='text/csv', headers={'Content-Disposition': 'attachment;filename=tasks.csv'})

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ 404 (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)
# @bp.errorhandler(404)
# def page_not_found(e):
#     return render_template('404.html'), 404
#
# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ 500 (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞)
# @bp.errorhandler(500)
# def internal_server_error(e):
#     return render_template('500.html'), 500
